[{"created":"2025-01-10T18:12:32.608Z","text":"This project is all about [[git]] and [[Github]]. It contains a lot of code and experiments interfacing Livecode with the git commandline tool, and the [[Github API]]. Our aim with this project is to empower the reader with both the understanding and the tools to start using [[git]] in their every day management of their work.\n\n{{$:/plugins/nico/projectify/ui/dashboard/Dashboard}}","title":"About","modified":"2025-01-25T00:42:04.602Z","type":"text/markdown"},{"created":"2025-01-24T22:11:34.583Z","text":"This is the hander we use to download a new repo from Github. After we hqve downloaded it for the first time we use [[git]].\n\n``` Livecode\ncommand gh_CloneOrgRepo repoName, pOrgName\n   -- gh repo clone LiveCodeWorld/lcw_Discord\n   if repoName is empty then return \"Error, no repo specified\"\n   if pOrgName is empty then put gh_DefaultOrg() into pOrgName\n   \n   # Step 1: Set the defaultfolder\n   put the defaultfolder into oFolder\n   set the defaultfolder to env_GetRepoFolder()\n   \n   # Step 2: Clone the repository\n   put \"gh repo clone [[pOrgName]]/[[repoName]]\" into sShell\n   put \"; \"  after sShell\n   put \"cd [[repoName]]\" after sShell\n   --\n   get merge (sShell)\n   set the defaultfolder to oFolder\n   return it\nend gh_CloneOrgRepo\n```\n","title":"command gh_CloneOrgRepo","modified":"2025-01-24T22:14:22.880Z","type":"text/markdown","tags":["Handler","Livecode"]},{"created":"2025-01-21T22:05:57.164Z","text":"We need to create [[Git Status Report]] tiddler and then update its contents with a LiveButton.","modified":"2025-02-04T10:28:14.378Z","title":"Create Git Status LiveButton","tags":["TiddlyGit","todo"],"due":"20250204235959999","priority":"1"},{"title":"Do nothing widget tutorial","created":"2019-02-01T23:21:02.417Z","modified":"2019-02-02T14:55:47.621Z","tags":[],"type":"text/vnd.tiddlywiki","text":"In order to define a widget in a tiddler, the tiddler must satisfy these requirements:\n\n* type field is application/javascript\n* module-type field is widget\n* the text field contains the javascript code\n\nThe [[donothing.js]] tiddler fulfills the requirements and its code looks like this:\n{{donothing.js}}\nThat code does 2 key things:\n\n* Imports the core Widget class ([[$:/core/modules/widgets/widget.js]])\n* exports the class in an attribute with the name we want our widget to have (`donothing`)\n\nHere's what it looks like:\n{{Do nothing widget demo}}\nAnd it worked. No error message this time.\n\n''Exercise'': Modify [[donothing.js]] and [[Do nothing widget demo]] so the widget is named `noop` instead of `donothing`\n\n"},{"created":"2025-01-21T22:54:27.017Z","text":"/*\\\n\nDolive widget\n\n\\*/\n(function(){\n\n/*jslint node: true, browser: true */\n/*global $tw: false */\n\"use strict\";\n\nvar Widget = require(\"$:/core/modules/widgets/widget.js\").widget;\n\nvar MyWidget = function(parseTreeNode,options) {\n\tthis.initialise(parseTreeNode,options);\n};\n\nMyWidget.prototype = new Widget();\n\nMyWidget.prototype.render = function(parent,nextSibling) {\n\tthis.parentDomNode = parent;\n\tvar text = this.wiki.getTiddlerText(\"test\", \"<empty>\")\n\tvar textNode = this.document.createTextNode(text);\n\tparent.insertBefore(textNode,nextSibling);\n\tthis.domNodes.push(textNode);\n};\n\nexports.dolive = MyWidget;\n\n})();\n","tags":[],"title":"Dolive.js","modified":"2025-01-21T23:55:11.959Z","type":"application/javascript","module-type":"widget"},{"created":"2025-01-24T21:44:21.948Z","text":"Here we define the [[command gh_DownloadRepo]]. We also establish the limits on [[Github Names]].","modified":"2025-01-24T21:46:13.071Z","title":"Download GitHub Repo","tags":["GitHub","todo"],"due":"","priority":""},{"created":"2025-01-25T01:11:20.108Z","text":"Our aim is to make it easy for peole to take action - simple action for simple things, but importantly also to empower people to take thoughtful, effective action around areas they are care deeply about. For this empowerment to work, we must enable  - by which we dont simply mean money.\n\n# Money or Monies worth\nInestment can be in the form of cash, or in terms of time. Infact there are rich and diverse forms of investment that are needed. it si partly by making it easy to aggregate and coordinate small investments that we aim to tackle larger problems. For this to work it must be both easy to invest, and the result of your personal contribution must be immediately apparent.\n\n# Spending Time\nProjects require cash. Any serious change of the status quo in the modern world requires a sustained financial investment. However, that is not enough. Finance, espeically altruistic finance is very fussy regarding waste, and it certainly does not like to be disrespected or taken for granted. Time matched investment is a proof of both need and contribution. It helps to multiply financial investment in effectiveness and the ability to sustainably raise further investment.\n\n# Auditing\nMeasuringTime is more than an audit. It is the basis for a parallel value exchange. When we not only measure time, but [[tokenise it|TokenizeTime]]. This provides both a managment interface to establish efficient allocation of resources, but a means to aggregate collective effort and channel it towards a single target. It enables us to [[get shit done|BlahBlahDone]].","title":"Energy Investment","modified":"2025-01-25T01:27:59.482Z","type":"text/markdown"},{"created":"2025-02-03T11:45:03.597Z","text":"! wikiscript Button Examples\nThe $wikiscript code is defined in [[Experimental.js]]. It creates on success a [[test]] tiddler, and logs result to a [[test-log]] tiddler. You can see this in the `$tw.wiki.addTiddler` calls from [[Experimental.js]]. This javascript tries to call [[ tiddlyButton_Call]] handler in Livecode, which in return dos something with the [[livecodeResultHandler]] handler.\n\n<$button>\n  $wikiscript with Wierd\n  <$wikiscript message=\"This is a totally weird message.\"/>\n</$button>\n\n<$button>\n  $wikiscript with Hello\n  <$wikiscript message=\"Hello\"/>\n</$button>\n\n<$button>\n  $wikiscript no Message\n  <$wikiscript/>\n</$button>\n\nThis is an experiment in asynchronous messaging between TiddlyWiki and LiveCode. The details of this experiment can be found in this [[chat|https://chatgpt.com/share/67a097c2-c578-8004-9ae5-736c8a33058b]] As I understand it the idea is / was to have Livecode respond by calling asynchronous javascript [[livecodeResultHandler]] as defined in [[Experimental.js]]. However this is complex and I didn;t finsih the experiment. It seemed more robust to stick to getting the interaction based between LiveCode and TiddlyWiki to be based on GettingAndSetting tiddlers which in turn triggers the relevant events.","title":"Experimental Messaging","modified":"2025-02-03T11:45:05.955Z"},{"created":"2025-01-22T10:26:22.910Z","text":"/*\\\ntitle: $:/plugins/custom/callLivecode\ntype: application/javascript\nmodule-type: widget\n\\*/\n(function(){\n\n/*jslint node: true, browser: true */\n/*global $tw: false */\n\"use strict\";\n\nvar Widget = require(\"$:/core/modules/widgets/widget.js\").widget;\n\nvar CallLivecodeWidget = function(parseTreeNode, options) {\n    this.initialise(parseTreeNode, options);\n};\n\nCallLivecodeWidget.prototype = new Widget();\n\n// Define the asynchronous result handler\nwindow.liveCode = window.liveCode || {};\nwindow.liveCode.livecodeResultHandler = function(result) {\n    // Update the \"test\" tiddler with the result from Livecode\n    $tw.wiki.addTiddler(new $tw.Tiddler({\n        title: \"test\",\n        text: result || \"No response from Livecode\",\n        type: \"text/plain\"\n    }));\n};\n\n// Define the invokeAction method\nCallLivecodeWidget.prototype.invokeAction = function(triggeringWidget, event) {\n    this.computeAttributes();\n    var message = this.getAttribute(\"message\", \"Default Message\");\n\n    try {\n        // Call the Livecode handler via the browser widget\n        liveCode.tiddlyButton_Call(message);\n\n        // Log the action to \"test-log\"\n        $tw.wiki.addTiddler(new $tw.Tiddler({\n            title: \"test-log\",\n            text: \"Called Livecode with message: \" + message,\n            type: \"text/plain\"\n        }));\n    } catch (e) {\n        // Log errors to the \"test-log\" tiddler\n        $tw.wiki.addTiddler(new $tw.Tiddler({\n            title: \"test-log\",\n            text: \"Error calling Livecode: \" + e.message,\n            type: \"text/plain\"\n        }));\n    }\n\n    return true; // Indicate the action has been handled\n};\n\nexports.wikiscript = CallLivecodeWidget;\n\n})();","tags":[],"title":"Experimental.js","modified":"2025-01-22T14:51:24.194Z","type":"application/javascript","module-type":"widget"},{"created":"2025-01-24T21:48:19.257Z","text":"The `gh` commandline tool is the prefered way to interact with github in the terminal. However while simple interfacing with this fixes us to Github and we prefer to standardise on the [[git]] compatible api and have the choice of running [[gitea]] locally should we wish.\n\n# Logging into Github\nThis has been made harder for security reason, and the `gh login` gommand makes this much easier. It walks you through the login process and we can use the browser to issue a token locally for subsequent calls. However this requirees us to use the terminal or xterm right now.\n\nMy understanding is that the way the local token is stored works across the [[terminal.app]] and Livecode's use of the shell command. Not at al sure how this is acheived. Let's ask [[chatgpt]]:\n\n# Prerequisites\n1. **GitHub CLI Installed**: Make sure the GitHub CLI (`gh`) is installed on your system. You can install it from [GitHub CLI installation page](https://cli.github.com/).\n2. **Authenticated with GitHub**: Ensure you are authenticated with GitHub using the `gh` CLI. Run:\n\n```bash\ngh auth login\n```\n\nFollow the prompts to log in if you haven't already.\n\n# See also\n\n- [[gh repo clone]]","title":"gh","modified":"2025-01-24T22:00:56.348Z","type":"text/markdown"},{"created":"2025-01-24T22:01:04.684Z","text":"To use the GitHub CLI (`gh`) to download the `lcw_Discord` repository to your local folder `~/LivecodeWorld`, follow these steps:\n\n## Step 1: Navigate to the Local Folder\nOpen your terminal and navigate to the folder where you want to clone the repository:\n\n```bash\ncd ~/LivecodeWorld\n```\n\nIn Livecode we can acheive the same result by:\n\n```Livecode\nset the defaultfolder to ~/LivecodeWorld\n```\n\n## Step 2: Use the GitHub CLI to Clone the Repo\nRun the following `gh` command:\n```bash\ngh repo clone LivecodeWorld/lcw_Discord\n```\n\n## Explanation of the Command:\n- `gh repo clone`: This command clones a repository from GitHub.\n- `LivecodeWorld/lcw_Discord`: Replace `LivecodeWorld` with the name of your organization and `lcw_Discord` with the name of your repository.\n\n# See also\n\n- [[command gh_CloneOrgRepo]]\n","title":"gh repo clone","modified":"2025-01-24T22:17:00.152Z","tags":["Livecode","Handler"],"type":"text/markdown"},{"created":"2025-01-21T21:45:14.277Z","text":"Git is an important pillar of what we do in terms of version control, and asynchronous social editorial. We need to get the workflow right.\n\n# See also\n\n- [[Github API]]","title":"git","modified":"2025-01-25T00:42:22.861Z","type":"text/markdown"},{"created":"2025-01-25T00:25:15.845Z","description":"","category":"Livecode","tags":["Project"],"modified":"2025-01-25T00:25:15.845Z","title":"Git"},{"created":"2025-01-25T00:25:30.697Z","text":"We now start to get smart about git folders as we understand its simply an invisible folder we can check for.\n\n# Handlers\nHandlers in [[model_Git]]:\n\n```\n--> Git | Init\n-\nfunction git_GetInit repoName\n   -- put the git_Folder of stack projectName into gitFolder\n   -- put git_GetCheckoutFolder (repoFolder) into repoRootFolder\n   \n   put git_InvisibleFolder (repoName) into gitInvisibleFolder\n   return gitInvisibleFolder is not empty\nend git_GetInit\n\ncommand git_SetInit repoFolder\n   put the defaultfolder into oDefault\n   set the defaultfolder to repoFolder\n   --\n   put git_PathToCommandLine() into gitPath\n   put gitPath & \"git init\" into someShell\n   put shell (someShell) into sResult\n   --\n   set the defaultfolder to oDefault\n   return sResult\nend git_SetInit\n\ncommand git_InitFolder gitRootFolder, pDontAdd\n   put the defaultfolder into oDefault\n   set the defaultfolder to gitRootFolder\n   \n   git_AddIgnore gitRootFolder\n   \n   git_SetInit repoFolder\n   put the result into shellResult\n   lcw_Notify shellResult\n   \n   get word 1 to 5 of shellResult\n   if it is not \"Initialized empty Git repository in\" and it is not \"Reinitialized existing Git repository in\" then\n      lcw_Notify shellResult\n      set the defaultfolder to oDefault\n      exit to top\n   end  if\n   \n   if pDontAdd is not true then\n      git_AddEverything gitRootFolder\n      put the result into shellResult\n      if shellResult is not empty then\n         lcw_Notify shellResult\n         breakpoint\n         -- exit to top\n      end if\n   end if\n   \n   -- git_SetRootFolder gitRootFolder\n   git_AddRootFolderToIndex gitRootFolder\n   \n   set the defaultfolder to oDefault\n   return gitRootFolder\nend git_InitFolder\n\ncommand git_AddIgnore gitRootFolder\n   text_AddTrailing gitRootFolder, slash\n   put \".DS_Store\" into gitIgnoreText\n   put gitIgnoreText into url (\"file:\" & gitRootFolder & \".gitignore\")\nend git_AddIgnore\n\ncommand git_RemoveDsStore\n   put \"find . -name .DS_Store -print0 | xargs -0 git rm -f --ignore-unmatch\" into someShell\nend git_RemoveDsStore\n```\n","modified":"2025-01-25T00:29:14.274Z","title":"Git Init","tags":["Git","todo","Handler"],"due":"","priority":"","type":"text/markdown"},{"title":"git status","text":"On branch master\nYour branch is up to date with 'origin/master'.\n\nnothing to commit, working tree clean","type":"text/plain"},{"created":"2025-02-03T17:46:06.601Z","text":"Here we show the latest [[git status]] for this project. The button below sends a message to the LiveGuide which in turn interacts with the [[git]] commandline tool to fetch the latest status result and display it in TiddlyWiki:\n\n<$button>\n  Git Status\n  <$callLivecode message=\"git status\"/>\n</$button>\n\nYou can see the output below:\n\n{{git status}}\n\n{{Git Status Buttons}}\n\nThe buttons above are dynamically created and transluded from [[Git Status Buttons]]. TiddlyWiki buttons are created by the TiddlyBrowser wrapper around TiddlyWiki.","type":"text/markdown","title":"Git Status","tags":[],"modified":"2025-02-04T10:25:41.221Z"},{"title":"Git Status Buttons","text":"<$button>Commit and Add<$callLivecode message=\"git commit and add\"/></$button>"},{"created":"2025-01-21T22:08:40.689Z","text":"We use this Tiddler to display the latest [[Git Status]].\n\n<$button set=\"!!refresh\" setTo={{test}}>Force refresh</$button>\n\n<$dolive/>","title":"Git Status Report","modified":"2025-07-17T08:17:13.200Z","refresh":"Unknown message: This is a Dynamic Message from TW"},{"created":"2025-01-21T21:30:41.058Z","text":"Github us an amazzing resource. It is owned by Microsoft. We should ensure we use [[Gitea]] as a fallback which should be OK as they are api compatible. Gitea should run nicely on a [[HomeLab]] setup.","title":"Github","modified":"2025-01-21T21:32:16.784Z"},{"created":"2025-01-24T21:42:33.630Z","text":"","description":"A project to create an Livecode interface to Github","category":"Livecode","tags":["Project"],"modified":"2025-01-24T21:43:25.952Z","title":"GitHub"},{"created":"2025-01-10T18:14:36.039Z","text":"The GitHub API allows developers to interact programmatically with GitHub's platform, enabling actions like managing repositories, issues, pull requests, and user data. It supports both REST and [[GraphQL]] endpoints, offering capabilities such as creating or modifying repositories, fetching commit histories, managing collaborators, automating workflows, and accessing organization or user information. It also allows integration with [[GitHub Action]]s, enabling automation within CI/CD pipelines.\n\n* https://docs.github.com/en/rest/using-the-rest-api/getting-started-with-the-rest-api?apiVersion=2022-11-28\n\nWe need to document it in tw, and focus on the aspects of the api we actually use.\n\n<<interstitial>>\n\n@@.interstitial\n* ''21:49'' What do we do about diffs and wiki and the [[Journal History]] of wiki?\n* ''21:51'' Kara markup messus up Markdown - should use front matter\n@@","title":"Github API","modified":"2025-01-21T21:51:30.821Z","tags":["TiddlyGit","todo"],"type":"text/vnd.tiddlywiki"},{"created":"2025-01-24T21:46:21.807Z","text":"# Organization Names\nWe note that as a consequnce of these naming strategies we do not need to escape or quote [[gh]] commands.\n\n    Length: Must be between 1 and 39 characters.\n    Allowed Characters:\n        Letters (a-z, A-Z)\n        Numbers (0-9)\n        Hyphens (-)\n    Restrictions:\n        Cannot include spaces.\n        Cannot begin or end with a hyphen.\n        Must not contain consecutive hyphens.\n        Must not be identical to existing usernames or organization names.\n        Must not impersonate another person, organization, or brand.\n\n# Repository Names\n\n    Length: Must be between 1 and 100 characters.\n    Allowed Characters:\n        Letters (a-z, A-Z)\n        Numbers (0-9)\n        Hyphens (-)\n        Underscores (_)\n        Periods (.)\n    Restrictions:\n        Cannot include spaces (use hyphens or underscores instead).\n        Cannot begin or end with special characters like hyphens, underscores, or periods.\n        Case-insensitive (e.g., MyRepo and myrepo are treated the same).\n        Cannot be the same as any reserved GitHub names or keywords (e.g., git, wiki, issues, etc.).\n        Should not contain slashes (/), as they are reserved for path separators in URLs.","title":"Github Names","modified":"2025-01-24T21:48:02.440Z","type":"text/markdown"},{"created":"2025-01-24T22:16:26.179Z","color":"#ffd9ff","tags":["$:/plugins/nico/projectify/tags/Category"],"modified":"2025-01-24T22:16:29.085Z","title":"Handler"},{"created":"2025-01-21T23:38:15.775Z","text":"Renders as:\n\n<$hello/>","tags":[],"title":"Hello Javascript","modified":"2025-01-22T09:47:04.258Z"},{"created":"2019-02-01T23:22:00.698Z","title":"Hello World widget tutorial","modified":"2025-01-21T22:47:12.639Z","tags":["TiddlyGit","todo"],"type":"text/vnd.tiddlywiki","text":"Now let's create a widget which actually has output.\n\nWhen tiddlywiki encounters a widget definition like `<$hello>` it will create an object which is an instance of the class which is exported by the widget code. \n\nIn addition to creating an instance of the class, tiddlywiki will call the render method of the resulting object. The render method is expected to create a dom node which will be display in place of the widget.\n\nIn the `donothing` example the core widget was exported. The core widget class doesn't have a render method which creates a dom node and that's why there is no output. Getting output requires writing a widget class which inherits from the core `Widget` class. Code in the render method of this class will display the hello world message.\n\nThe [[hello.js]] tiddler has code which accomplishes that:\n{{hello.js}}\nThe code for importing the core widget class remains, but now we also have code to create our own class which inherits from it. In addition an implementation of the `render` method is included. Here is the result:\n{{Hello World demo}}\n"},{"created":"2025-01-21T23:32:20.148Z","text":"/*\\\n\nHello, World widget\n\n\\*/\n(function(){\n\n/*jslint node: true, browser: true */\n/*global $tw: false */\n\"use strict\";\n\nvar Widget = require(\"$:/core/modules/widgets/widget.js\").widget;\n\nvar MyWidget = function(parseTreeNode,options) {\n\tthis.initialise(parseTreeNode,options);\n};\n\n/*\nInherit from the base widget class\n*/\nMyWidget.prototype = new Widget();\n\n/*\nRender this widget into the DOM\n*/\nMyWidget.prototype.render = function(parent,nextSibling) {\n\tthis.parentDomNode = parent;\n\tvar textNode = this.document.createTextNode(\"Hello, World!\");\n\tparent.insertBefore(textNode,nextSibling);\n\tthis.domNodes.push(textNode);\n};\n\nexports.hello = MyWidget;\n\n})();","tags":[],"title":"Hello.js","modified":"2025-01-21T23:35:40.200Z","type":"application/javascript","module-type":"widget"},{"title":"Javascript Widget Tutorial","created":"2019-02-02T03:55:24.804Z","modified":"2024-03-02T11:06:58.300Z","tags":[],"type":"text/vnd.tiddlywiki","text":"! Introduction\nThis tutorial provides step-by-step, interactive examples of how to write code for tiddlywiki widgets. The demo javascript code can be modified without having to reload the entire wiki.\n\nIntended audience:\n\n# Those who know tiddlywiki well and know programming and javascript and want to write their own widget.\n# Those who know tiddlywiki well and don't know javascript, but want to understand more about how tiddlywiki works. You should be able to skim through and interact with the demos and learn something.\n\nWe don't make any effort to explain javascript here. For that you will need other resources, like [[MDN|https://developer.mozilla.org/en-US/docs/Web/JavaScript]].\n\n!! The tutorial\n* [[Undefined widget tutorial]]\n* [[Do nothing widget tutorial]]\n* [[Hello World widget tutorial]]\n* [[Widget refresh tutorial part I]]\n* [[Widget refresh tutorial part II]]\n* [[Widget refresh tutorial part III]]\n* [[Widget attributes tutorial part I]]\n* [[Widget attributes tutorial part II]]\n* [[Child widgets tutorial]]\n\n!! Notes\n\ntiddlywiki doesn't support dynamically reloading javascript. If you change a javascript tiddler, then you need to save and reload  the wiki before the changes will take affect.\n\nTo avoid the need for such reloads, the excellent [[innerwiki plugin|https://tiddlywiki.com/prerelease/plugins/tiddlywiki/innerwiki/]] is used. This allows an inner wiki to be created from a subset of tiddlers in the outer wiki. Each time the inner wiki is refreshed, its entire wiki is reloaded and the javascript changes in the inner wiki will take affect.\n\nWithout the need for reloads, a tiddlywiki instance with the [[innerwiki plugin|https://tiddlywiki.com/prerelease/plugins/tiddlywiki/innerwiki/]] installed works great as a playground for interacting with tiddlywiki javascript.\n\n!! Other documentation on writing TW widgets\n\n* WidgetModules\n* [[Widgets]]\n\n!! Full API doc\n\n[[Github Pages of TW5-Typed|https://tiddly-gittly.github.io/TW5-Typed/api/classes/modules_widgets.widget]]\n"},{"created":"2025-02-03T12:14:42.089Z","text":"This handler is generally used by the [[behavior_TiddlyWiki]] script to execute:\n\n```\non javascript_Result sResult\n   -- requires \"javascript_Result\" to be among the lines of the javascripthandlers of me\n   -- Generic handler used to return result to \"getprop\"\n   -- Not called when js fails to return text\n   \n   put sResult into LocalArray [\"sResult\"]\n   return sResult\nend javascript_Result\n```\n\nI think the `var message = this.getAttribute(\"message\", \"Default Message\");` code is not working as hoped (while it does in [[Experimental.js]].\n","title":"javascript_Result","modified":"2025-02-03T12:27:15.151Z"},{"created":"2025-01-22T14:48:31.517Z","text":"     /*\\\ntitle: $:/plugins/custom/callLivecode\ntype: application/javascript\nmodule-type: widget\n\\*/\n(function(){\n\n/*jslint node: true, browser: true */\n/*global $tw: false */\n\"use strict\";\n\n// Import the base Widget class\nvar Widget = require(\"$:/core/modules/widgets/widget.js\").widget;\n\n// Define the CallLivecode widget class\nvar CallLivecodeWidget = function(parseTreeNode, options) {\n    this.initialise(parseTreeNode, options);\n};\n\n// Inherit from the base Widget class\nCallLivecodeWidget.prototype = new Widget();\n\n// Define the invokeAction method (called when triggered)\nCallLivecodeWidget.prototype.invokeAction = function(triggeringWidget, event) {\n    // Retrieve the 'message' parameter from the widget\n    var message = this.getAttribute(\"message\", \"Default Message\");\n\n    try {\n        liveCode.javascript_Result(message); // Pass the message to Livecode\n    } catch (e) {\n        console.error(\"Error calling Livecode:\", e);\n    }\n    return true; // Indicate the action has been handled\n};\n\n// Export the widget class\nexports.callLivecode = CallLivecodeWidget;\n\n})();","tags":[],"title":"Last.js","modified":"2025-02-03T13:03:51.530Z"},{"created":"2025-01-21T22:09:20.882Z","text":"A LiveButton is a [[TiddlyButton]] that uses javascript to call Livecode. The `<$hello>` test-action widget is registered:\n\n<$hello/>\n\nTiddlyWiki does not directly support inline JavaScript execution via widgets. Instead, JavaScript must either be embedded in a custom plugin (or maybe executed via an appropriate API like tm-sendmessage???).\n\n! Best Practice\nThe [[$:/plugins/custom/ExecuteJavaScript]] macro exports `exports.callLivecode = CallLivecodeWidget;`, which can be called in a button with `<$callLivecode>`. \n\nAs you can see by the javascript:\n\n```\nliveCode.tiddlyButton_Call(safeMessage);\n```\n\nwe (currently) simply call [[tiddlyButton_Call]] function in LiveCode. Here are some `callLivecode` button examples:\n\n```\n<$button>\n  $callLivecode\n  <$callLivecode/>\n</$button>\n```\n\n<$button>\n  $callLivecode\n  <$callLivecode/>\n</$button>\n\n<$button>\n  Send \"Hello\" with $callLivecode\n  <$callLivecode message=\"Hello\"/>\n</$button>\n\n<$vars dynamicMessage=\"This is a Dynamic Message from TW\">\n  <$button>\n    Send Dynamic Message with $callLivecode\n    <$callLivecode message=<<dynamicMessage>>/>\n  </$button>\n</$vars>\n\nSee also work in progress using translcusion for multiline text only messages:\n\n* [[Multiline LiveButton Messages]]\n\n\nCurrently the javascript is not properly passing the content to the command [[javascript_Result]].\n\n! See also\nSome experiments regarding asynchrounous interacctions between LiveCode and TiddlyWiki:\n\n* [[Experimental Messaging]]\n\nThe result of these tests are displayed in the [[Test]] tiddler, and sometimes logged in the [[test-log]] tiddler.\n\n```\n<$button>\n  $wikiscript with Hello\n  <$wikiscript message=\"Hello\"/>\n</$button>\n```","title":"LiveButton","modified":"2025-03-09T09:21:30.575Z"},{"created":"2025-01-21T21:44:00.776Z","color":"#ffd9ff","tags":["$:/plugins/nico/projectify/tags/Category"],"modified":"2025-01-21T21:44:03.614Z","title":"Livecode"},{"created":"2025-02-03T17:23:43.157Z","text":"Livecode is a iterate programming languuage and crossplatform development environment derived from HyperCard. It is particularly useful when developing software where users need to understand (read) and contrinbute to the code-base. It enables us to create cross-platform (electron-style) applications on all major mobile and desktop platforms.\n\nThe platform also enables us to deploy as wasm based components to the web. As such this makes it an intruiging development platform for rapudly prototyping compnents for TiddlyGuides, as well as creating a wrapper for TiddlyWiki so that we can deploy easy to use mobile appliocations on Android and iOS.","title":"LiveCode","modified":"2025-02-03T17:30:58.068Z"},{"title":"LiveCode Message Log","text":"Message sent: git status","type":"text/plain"},{"created":"2025-01-25T01:08:51.170Z","text":"I micros-assembly is a small functional group of human-and-non-human actors that are organised in a way that facilitates deliberation and collective decision-making. It is the foundational unit for human centred governance.","title":"MicroAssembly","modified":"2025-01-25T01:10:46.843Z"},{"created":"2025-02-03T17:40:14.679Z","text":"This example uses TiddlyWiki's ability to translude content to send teh contents of the LiveCode tiddler as a message.\n\n```\n<$button>\n    Transcluded Message from [[LiveCode]] with $callLivecode\n    <$callLivecode message={{LiveCode}}/>\n</$button>\n```\n\n<$button>\n    Transcluded Message from [[LiveCode]] with $callLivecode\n    <$callLivecode message={{LiveCode}}/>\n</$button>","title":"Multiline LiveButton Messages","modified":"2025-02-03T17:40:16.198Z"},{"created":"2025-02-07T20:53:37.335Z","text":"<$presentation>\n<$slide>Welcome to ''Reveal.js''</$slide>\n<$slide>Embedded inside TiddlyWiki</$slide>\n<$slide>\n  <$slide>Vertical Slides</$slide>\n  <$slide>Can also me manged with one level of nesting</$slide>\n</$slide>\n</$presentation>","tags":[],"title":"Pitch","modified":"2025-02-07T20:53:58.836Z"},{"created":"2025-01-25T00:54:02.929Z","text":"A core precept of the project is that we build on simple long-term foundations that this simplicity is noth both technical and social. A unique feature of the technological underpinning of this philosophy is the focus on building around a new standard for a single, web (ie modern HTML) file format.\n\nOur aim is that it should be a simple matter to craft these files, and that anyone can send them around - by email or messaging apps - and view them, read them, create them and interact with them. Everything you need to perform all these functions is contained within this single file format, and all you need to have is a web browser. There is no need to have an active internet connection to interact fully with document.\n\n# Magical\nThere is more to this format, than simple pragmatics. It has SuperPower's. Firstly it is social, and as such the foundation for a new form of hybrid social network. You can [[join|Join In]], and you can [[invest|Energy Investment]]. Secondly it si beautiful. The format is rich, dynamic, animated and interactive. You wnat to touch it. And thirdly it is mystical and intruiging - embodying as it does qualities that are [[strange|StrangeFish]] and yet [[powerful|SuperPower]].","title":"SingleFile","modified":"2025-01-25T01:33:41.984Z","type":"text/markdown"},{"title":"test","text":"Unknown message: This is a Dynamic Message from TW","type":"text/plain"},{"title":"test-log","text":"Called Livecode with message: This is a totally weird message.","type":"text/plain"},{"created":"2025-02-03T10:07:47.528Z","text":"The LiveCode handler is a stub for now. It can be found in the [[behavior_TiddlyWiki]] script. It is called by [[Experimental.js]] and creates/adds the the tiddler and navigates there:\n\n```\non tiddlyButton_Call sMessage\n   local sResult\n   switch sMessage\n      case \"Destroy\"\n         put \"Careful, this is dangerous\" into sResult\n         break\n      case \"Hello, Livecode!\"\n         put \"Hello from Livecode!\" into sResult\n         break\n      default\n         put \"Unknown message: \" & sMessage into sResult\n   end switch\n   \n   # Update the \"test\" tiddler with the result\n   put \"var tiddler = new $tw.Tiddler({title: 'test', text: '\" & sResult & \"', type: 'text/plain'});\" & \\\n         \"$tw.wiki.addTiddler(tiddler);\" into sJavascript\n   do sJavascript in me\n   \n   # Show test tiddler\n   set the show_Tiddler of me to \"test\"\nend tiddlyButton_Call\n```\n\nThe [[show_Tiddler]] handler was a bit dramatic - we can instead use the [[tiddler_Add]] handler to add the tiddler to teh story river.","title":"tiddlyButton_Call","modified":"2025-02-03T10:12:31.471Z"},{"created":"2025-01-21T21:43:25.670Z","tags":["Project"],"modified":"2025-01-21T22:47:12.641Z","title":"TiddlyGit","list":["Create Git Status LiveButton","Hello World widget tutorial","Github API"]},{"created":"2025-01-25T00:50:10.447Z","text":"TiddlyProject is a SingleFile solution to personal and asynchronous project management challenges. It aims to be a core functional aspect of TiddlyGuide's and therefore of the BillionDao initialtive. For HitchHiker's we aim to empower [[micro-assembly's|MicroAssembly]] with free and effective project managment so that can turn blah-blah-blah into BlahBlahDone.","title":"TiddlyProject","modified":"2025-01-25T01:08:30.754Z"},{"title":"Undefined widget tutorial","created":"2019-02-01T23:20:01.970Z","modified":"2019-02-02T14:56:55.413Z","tags":[],"type":"text/vnd.tiddlywiki","text":"Let's start be defining a minimal widget which does nothing. It doesn't support any attributes, no child elements, and it doesn't output anything. The name of the widget will be `donothing`. If it does nothing, then how can we verify after writing the code that we accomplished anything? Well, let's see what happens when an undefined widget is referenced.\n\n{{Undefined widget demo}}\n\nSince we haven't written the code, the attempt to render the widget gives an undefined widget error. So we will know the donothing code accomplishes something if we don't get the undefined widget error when rendering."},{"title":"Wikis with Readme","text":"- [[View Org Association]]\n- [[View Index Simple]]\n- [[View TiddlyWiki]]\n- [[lcw_Project|lcw_Project]]\n- [[lcw_Display|lcw_Display]]\n- [[lcw_Caddy|lcw_Caddy]]\n- [[lcw_Wiki|lcw_Wiki]]\n- [[lcw_GIT|lcw_GIT]]\n- [[lcw_Tools|lcw_Tools]]\n- lcw\n- [[lcw_P2P|lcw_P2P]]\n","type":"text/markdown"},{"created":"2025-01-21T21:36:52.380Z","text":"Getting enough tools and best practice together for an individual to use TiddlyProject as a way to manage their work. The focus on software development makes this quite demanding. Need to get clear in writing about the [[Asynchronous Collaboration]] methodology.\n\n<<interstitial>>\n\n@@.interstitial\n* ''21:42'' We should start thinking about displaying [[git]] data in tw?\n* ''21:52'' Let's try a [[Git Status Report]] with a LiveButton\n* ''23:41'' Needed to reload - but [[Hello Javascript]] works!\n* ''00:24'' Git init and Github project initialisation\n* ''00:46'' We should explore Mermaid\n* ''01:37'' Lets do the Roadmap and Mermaid in the morning?\n* ''10:03'' Let's focus on TiddlyWiki demo (after finsishing LiveButton documentation.\n* ''17:45'' Documented TiddlyWiki - Livecode messaging. Now creating test example using `git status`\n* ''03:45'' Happy birthday wiki....\n* ''03:58'' Happy birthday wiki!\n@@","title":"Working on","modified":"2025-03-25T03:58:31.244Z"}]